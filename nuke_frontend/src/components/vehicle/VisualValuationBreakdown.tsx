import React, { useCallback, useEffect, useState } from 'react';
import { supabase } from '../../lib/supabase';
import { ValuationEngine, ValuationResult } from '../../services/valuationEngine';
import { SmartInvoiceUploader } from '../SmartInvoiceUploader';

interface VisualValuationBreakdownProps {
  vehicleId: string;
  isOwner: boolean;
}

/**
 * Visual Valuation Breakdown - Shows WHY the vehicle is worth what it's worth
 *
 * Prefers expert valuations generated by the Vehicle Expert Agent.
 * Falls back to legacy valuation engine when expert data is unavailable.
 */
export const VisualValuationBreakdown: React.FC<VisualValuationBreakdownProps> = ({
  vehicleId,
  isOwner
}) => {
  const [valuation, setValuation] = useState<ValuationResult | null>(null);
  const [expertValuation, setExpertValuation] = useState<any | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [expanded, setExpanded] = useState<string[]>([]);
  const [showUploader, setShowUploader] = useState(false);

  const loadValuation = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      // Prefer expert valuation if available
      const { data: expertData, error: expertError } = await supabase
        .from('vehicle_valuations')
        .select('id, estimated_value, documented_components, confidence_score, components, environmental_context, value_justification, valuation_date')
        .eq('vehicle_id', vehicleId)
        .order('valuation_date', { ascending: false })
        .limit(1)
        .maybeSingle();

      if (!expertError && expertData) {
        setExpertValuation(expertData);
        setValuation(null);
        return;
      }

      // Fallback to legacy valuation engine
      const result = await ValuationEngine.calculateValuation(vehicleId);
      setValuation(result);
      setExpertValuation(null);
    } catch (err: any) {
      console.error('Valuation failed:', err);
      setError(err.message || 'Unknown error');
    } finally {
      setLoading(false);
    }
  }, [vehicleId]);

  useEffect(() => {
    loadValuation();
    const handleRefresh = () => loadValuation();
    window.addEventListener('vehicle_valuation_updated', handleRefresh);
    return () => window.removeEventListener('vehicle_valuation_updated', handleRefresh);
  }, [loadValuation]);

  const toggleExpanded = (key: string) => {
    setExpanded(prev =>
      prev.includes(key)
        ? prev.filter(c => c !== key)
        : [...prev, key]
    );
  };

  const formatCurrency = (val: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0
    }).format(val);
  };

  if (loading) {
    return (
      <div className="card">
        <div className="card-header">Valuation Breakdown</div>
        <div className="card-body">
          <div style={{ textAlign: 'center', padding: '20px', color: 'var(--text-muted)' }}>
            Calculating valuation...
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="card">
        <div className="card-header">Valuation Breakdown</div>
        <div className="card-body">
          <div style={{ textAlign: 'center', padding: '20px', color: '#ef4444' }}>
            Error loading valuation: {error}
          </div>
        </div>
      </div>
    );
  }

  /**
   * EXPERT VALUATION VIEW
   */
  if (expertValuation) {
    const components = Array.isArray(expertValuation.components) ? expertValuation.components : [];
    const environmental = expertValuation.environmental_context || {};
    const purchaseFloor = Math.max(0, (expertValuation.estimated_value || 0) - (expertValuation.documented_components || 0));

    return (
      <div className="card">
        <div className="card-header" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <span>AI Expert Valuation</span>
          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
            {isOwner && (
              <button
                className="button button-primary button-small"
                onClick={() => setShowUploader(true)}
                style={{ fontSize: '8pt', padding: '4px 8px' }}
              >
                ðŸ§¾ Add Receipt
              </button>
            )}
            <div style={{ fontSize: '8pt', color: 'var(--text-muted)' }}>
              {expertValuation.confidence_score || 0}% confidence Â· Updated {expertValuation.valuation_date ? new Date(expertValuation.valuation_date).toLocaleString() : 'recently'}
            </div>
          </div>
        </div>

        <div className="card-body">
          {/* Summary */}
          <div style={{
            padding: '12px',
            background: 'var(--grey-50)',
            border: '2px solid var(--border)',
            marginBottom: '16px'
          }}>
            <div style={{ display: 'grid', gridTemplateColumns: '1fr auto', gap: '8px', fontSize: '9pt' }}>
              <div style={{ fontWeight: 'bold' }}>Purchase Floor:</div>
              <div style={{ textAlign: 'right', fontWeight: 'bold' }}>
                {formatCurrency(purchaseFloor)}
              </div>

              {(expertValuation.documented_components || 0) > 0 && (
                <>
                  <div style={{ color: 'var(--text-muted)' }}>+ Documented Components:</div>
                  <div style={{ textAlign: 'right', color: '#10b981', fontWeight: 'bold' }}>
                    {formatCurrency(expertValuation.documented_components)}
                  </div>
                </>
              )}

              <div style={{
                borderTop: '2px solid var(--border)',
                paddingTop: '8px',
                fontWeight: 'bold',
                fontSize: '11pt'
              }}>
                Estimated Value:
              </div>
              <div style={{
                borderTop: '2px solid var(--border)',
                paddingTop: '8px',
                textAlign: 'right',
                fontWeight: 'bold',
                fontSize: '11pt',
                color: 'var(--accent)'
              }}>
                {formatCurrency(expertValuation.estimated_value || 0)}
              </div>
            </div>
          </div>

          {/* Value Justification Narrative */}
          {expertValuation.value_justification && (
            <div style={{
              marginBottom: '16px',
              padding: '12px',
              background: 'var(--surface)',
              border: '1px solid var(--border)',
              fontSize: '8pt',
              whiteSpace: 'pre-wrap'
            }}>
              {expertValuation.value_justification}
            </div>
          )}

          {/* Components */}
          <div style={{ fontSize: '8pt' }}>
            <div style={{ fontWeight: 'bold', marginBottom: '8px', fontSize: '9pt' }}>
              Documented Components ({components.length} items)
            </div>

            {components.length === 0 && (
              <div style={{
                padding: '12px',
                border: '1px dashed var(--border)',
                borderRadius: '2px',
                color: 'var(--text-muted)'
              }}>
                No components have been documented visually yet. Add more detailed photos to increase documentation score.
              </div>
            )}

            {components.map((item: any, idx: number) => {
              const photoCount = item.evidence?.photoCount || item?.evidence?.photo_count || 0;
              const images: string[] = item.evidence?.imageUrls || item.evidence?.image_urls || [];
              const amount = item.estimatedValue ?? item.estimated_value ?? 0;
              const conditionLabel = item.condition || item.condition_label || 'Unknown';
              const conditionGrade = item.conditionGrade ?? item.condition_grade ?? null;
              const toggleKey = `${item.name}-${idx}`;

              return (
                <div
                  key={toggleKey}
                  style={{
                    marginBottom: '8px',
                    border: '1px solid var(--border)',
                    borderRadius: '2px',
                    overflow: 'hidden'
                  }}
                >
                  <div
                    onClick={() => toggleExpanded(toggleKey)}
                    style={{
                      padding: '8px',
                      background: 'var(--surface)',
                      cursor: images.length > 0 ? 'pointer' : 'default',
                      display: 'grid',
                      gridTemplateColumns: '1fr auto auto auto',
                      gap: '8px',
                      alignItems: 'center',
                      transition: 'background 0.12s ease'
                    }}
                    onMouseEnter={(e) => {
                      if (images.length > 0) {
                        e.currentTarget.style.background = 'var(--grey-50)';
                      }
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = 'var(--surface)';
                    }}
                  >
                    <div>
                      <div style={{ fontWeight: 'bold' }}>{item.name}</div>
                      <div style={{ color: 'var(--text-muted)', fontSize: '7pt' }}>
                        {conditionGrade ? `${conditionLabel} Â· ${conditionGrade}/10` : conditionLabel}
                      </div>
                      {item.reasoning && (
                        <div style={{ color: 'var(--text-muted)', fontSize: '7pt', marginTop: '4px' }}>
                          {item.reasoning}
                        </div>
                      )}
                    </div>

                    <div style={{ fontSize: '7pt', color: 'var(--text-muted)' }}>
                      {item.evidence?.datePhotographed ? new Date(item.evidence.datePhotographed).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) : 'No date'}
                    </div>

                    <div style={{
                      fontSize: '7pt',
                      padding: '2px 6px',
                      background: photoCount > 3 ? '#dcfce7' : photoCount > 0 ? '#fef3c7' : '#fee2e2',
                      border: '1px solid ' + (photoCount > 3 ? '#86efac' : photoCount > 0 ? '#fbbf24' : '#fca5a5'),
                      borderRadius: '2px'
                    }}>
                      {photoCount} {photoCount === 1 ? 'photo' : 'photos'}
                    </div>

                    <div style={{ fontWeight: 'bold', textAlign: 'right' }}>
                      {formatCurrency(amount)}
                    </div>
                  </div>

                  {expanded.includes(toggleKey) && images.length > 0 && (
                    <div style={{
                      padding: '8px',
                      background: 'var(--grey-50)',
                      borderTop: '1px solid var(--border)'
                    }}>
                      <div style={{
                        display: 'grid',
                        gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
                        gap: '6px'
                      }}>
                        {images.map((url, imgIdx) => (
                          <div
                            key={imgIdx}
                            style={{
                              width: '100%',
                              paddingBottom: '100%',
                              background: `url(${url}) center/cover`,
                              border: '1px solid var(--border)',
                              cursor: 'pointer'
                            }}
                            onClick={() => window.open(url.replace('_thumbnail', '_large'), '_blank')}
                          />
                        ))}
                      </div>
                      {item.evidence?.location && (
                        <div style={{ marginTop: '6px', fontSize: '7pt', color: 'var(--text-muted)', textAlign: 'center' }}>
                          Location: {item.evidence.location}
                        </div>
                      )}
                    </div>
                  )}
                </div>
              );
            })}
          </div>

          {/* Environmental Context */}
          {environmental && (
            <div style={{
              marginTop: '16px',
              padding: '12px',
              background: 'var(--grey-50)',
              border: '1px solid var(--border)',
              fontSize: '8pt'
            }}>
              <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>Environmental Context (5 W's)</div>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: '6px' }}>
                <div><strong>Who:</strong> {(environmental.who || []).join(', ') || 'Unknown'}</div>
                <div><strong>What:</strong> {(environmental.what || []).join(', ') || 'Unknown'}</div>
                <div><strong>When:</strong> {environmental.when || 'Unknown'}</div>
                <div><strong>Where:</strong> {environmental.where || 'Unknown'}</div>
                <div><strong>Why:</strong> {environmental.why || 'Unknown'}</div>
                {environmental.toolsVisible && environmental.toolsVisible.length > 0 && (
                  <div><strong>Tools:</strong> {environmental.toolsVisible.join(', ')}</div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  /**
   * LEGACY VALUATION VIEW
   */
  if (!valuation) {
    return null;
  }

  return (
    <div className="card">
      <div className="card-header" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <span>Valuation Breakdown</span>
        <div style={{ fontSize: '8pt', color: 'var(--text-muted)' }}>
          {valuation.overallConfidence}% confidence
        </div>
      </div>
      
      <div className="card-body">
        {/* Summary */}
        <div style={{ 
          padding: '12px', 
          background: 'var(--grey-50)', 
          border: '2px solid var(--border)',
          marginBottom: '16px'
        }}>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr auto', gap: '8px', fontSize: '9pt' }}>
            <div style={{ fontWeight: 'bold' }}>Purchase Price:</div>
            <div style={{ textAlign: 'right', fontWeight: 'bold' }}>
              {formatCurrency(valuation.purchasePrice)}
            </div>

            {valuation.documentedInvestments > 0 && (
              <>
                <div style={{ color: 'var(--text-muted)' }}>+ Documented Investments:</div>
                <div style={{ textAlign: 'right', color: '#10b981', fontWeight: 'bold' }}>
                  {formatCurrency(valuation.documentedInvestments)}
                </div>
              </>
            )}

            <div style={{ 
              borderTop: '2px solid var(--border)', 
              paddingTop: '8px', 
              fontWeight: 'bold',
              fontSize: '11pt'
            }}>
              Estimated Value:
            </div>
            <div style={{ 
              borderTop: '2px solid var(--border)', 
              paddingTop: '8px',
              textAlign: 'right',
              fontWeight: 'bold',
              fontSize: '11pt',
              color: 'var(--accent)'
            }}>
              {formatCurrency(valuation.estimatedValue)}
            </div>
          </div>

          {/* Market context */}
          {valuation.marketReference > 0 && (
            <div style={{ 
              marginTop: '12px', 
              paddingTop: '12px', 
              borderTop: '1px solid var(--border)',
              fontSize: '8pt',
              color: 'var(--text-muted)'
            }}>
              <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                <span>Market Reference:</span>
                <span>{formatCurrency(valuation.marketReference)}</span>
              </div>
              <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '4px' }}>
                <span>Position:</span>
                <span style={{ 
                  fontWeight: 'bold',
                  color: valuation.marketPosition === 'above' ? '#10b981' : 
                         valuation.marketPosition === 'below' ? '#ef4444' : 
                         'var(--text)'
                }}>
                  {valuation.marketPosition === 'above' ? 'â†‘ Above Market' : 
                   valuation.marketPosition === 'below' ? 'â†“ Below Market' : 
                   '= At Market'}
                </span>
              </div>
            </div>
          )}
        </div>

        {/* Warnings */}
        {valuation.warnings.length > 0 && (
          <div style={{ 
            padding: '12px', 
            background: '#fef3c7', 
            border: '1px solid #fbbf24',
            marginBottom: '16px',
            fontSize: '8pt'
          }}>
            {valuation.warnings.map((warning, idx) => (
              <div key={idx} style={{ marginBottom: idx < valuation.warnings.length - 1 ? '6px' : '0' }}>
                {warning}
              </div>
            ))}
          </div>
        )}

        {/* Line Items with Visual Evidence */}
        <div style={{ fontSize: '8pt' }}>
          <div style={{ fontWeight: 'bold', marginBottom: '8px', fontSize: '9pt' }}>
            Investment Timeline ({valuation.lineItems.length} items)
          </div>
          
          {valuation.lineItems.map((item, idx) => (
            <div 
              key={idx}
              style={{ 
                marginBottom: '8px',
                border: '1px solid var(--border)',
                borderRadius: '2px',
                overflow: 'hidden'
              }}
            >
              {/* Line item header */}
              <div 
                onClick={() => toggleExpanded(item.category + idx)}
                style={{ 
                  padding: '8px',
                  background: 'var(--surface)',
                  cursor: item.evidence.photoCount > 0 ? 'pointer' : 'default',
                  display: 'grid',
                  gridTemplateColumns: '1fr auto auto auto',
                  gap: '8px',
                  alignItems: 'center',
                  transition: 'background 0.12s ease'
                }}
                onMouseEnter={(e) => {
                  if (item.evidence.photoCount > 0) {
                    e.currentTarget.style.background = 'var(--grey-50)';
                  }
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'var(--surface)';
                }}
              >
                <div>
                  <div style={{ fontWeight: 'bold' }}>{item.category}</div>
                  <div style={{ color: 'var(--text-muted)', fontSize: '7pt' }}>
                    {item.description}
                  </div>
                </div>

                <div style={{ fontSize: '7pt', color: 'var(--text-muted)' }}>
                  {new Date(item.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
                </div>

                <div style={{ 
                  fontSize: '7pt',
                  padding: '2px 6px',
                  background: item.evidence.photoCount > 3 ? '#dcfce7' : 
                              item.evidence.photoCount > 0 ? '#fef3c7' : 
                              '#fee2e2',
                  border: '1px solid ' + (
                    item.evidence.photoCount > 3 ? '#86efac' : 
                    item.evidence.photoCount > 0 ? '#fbbf24' : 
                    '#fca5a5'
                  ),
                  borderRadius: '2px'
                }}>
                  {item.evidence.photoCount} {item.evidence.photoCount === 1 ? 'photo' : 'photos'}
                </div>

                <div style={{ fontWeight: 'bold', textAlign: 'right' }}>
                  {formatCurrency(item.amount)}
                </div>
              </div>

              {/* Expandable photo evidence */}
              {expanded.includes(item.category + idx) && item.evidence.imageUrls.length > 0 && (
                <div style={{ 
                  padding: '8px',
                  background: 'var(--grey-50)',
                  borderTop: '1px solid var(--border)'
                }}>
                  <div style={{ 
                    display: 'grid', 
                    gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
                    gap: '6px'
                  }}>
                    {item.evidence.imageUrls.map((url, imgIdx) => (
                      <div 
                        key={imgIdx}
                        style={{
                          width: '100%',
                          paddingBottom: '100%',
                          background: `url(${url}) center/cover`,
                          border: '1px solid var(--border)',
                          cursor: 'pointer'
                        }}
                        onClick={() => window.open(url.replace('_thumbnail', '_large'), '_blank')}
                      />
                    ))}
                  </div>
                  <div style={{ 
                    marginTop: '6px', 
                    fontSize: '7pt', 
                    color: 'var(--text-muted)',
                    textAlign: 'center'
                  }}>
                    Click images to view full size â€¢ {item.confidence}% confidence
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Documentation Score */}
        <div style={{ 
          marginTop: '16px',
          padding: '12px',
          background: 'var(--grey-50)',
          border: '1px solid var(--border)',
          fontSize: '8pt'
        }}>
          <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>Documentation Quality</div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <div style={{ flex: 1, background: 'var(--grey-300)', height: '20px', borderRadius: '2px', overflow: 'hidden' }}>
              <div style={{ 
                width: `${valuation.documentationScore}%`, 
                height: '100%',
                background: valuation.documentationScore > 70 ? '#10b981' : 
                           valuation.documentationScore > 40 ? '#fbbf24' : 
                           '#ef4444',
                transition: 'width 0.3s ease'
              }} />
            </div>
            <div style={{ fontWeight: 'bold', minWidth: '45px', textAlign: 'right' }}>
              {valuation.documentationScore.toFixed(0)}%
            </div>
          </div>
          <div style={{ marginTop: '6px', color: 'var(--text-muted)', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <span>{valuation.imagesWithEvidence} of {valuation.totalImages} photos linked to value claims</span>
            {isOwner && (
              <button
                className="button button-primary button-small"
                onClick={() => setShowUploader(true)}
                style={{ 
                  fontSize: '7pt', 
                  padding: '3px 8px',
                  marginLeft: '8px'
                }}
              >
                + Add Receipt
              </button>
            )}
          </div>
        </div>

        {/* Smart Invoice Uploader Modal */}
        {showUploader && (
          <SmartInvoiceUploader
            vehicleId={vehicleId}
            onClose={() => setShowUploader(false)}
            onSaved={() => {
              setShowUploader(false);
              loadValuation();
            }}
          />
        )}
      </div>
    </div>
  );
};

