/**
 * Live Vehicle Card - Homepage Feed
 * Swipeable images, pinch zoom, real-time updates, financial indicators, support button
 */

import React, { useState, useRef, useEffect } from 'react';
import { CreditsService } from '../../services/creditsService';
import { SupportVehicleButton } from '../credits/SupportVehicleButton';

interface VehicleCardLiveProps {
  vehicle: any;
  viewMode?: 'gallery' | 'grid' | 'technical';
}

export const VehicleCardLive: React.FC<VehicleCardLiveProps> = ({ vehicle, viewMode = 'gallery' }) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [scale, setScale] = useState(1);
  const [touchStart, setTouchStart] = useState<{x: number, y: number} | null>(null);
  const [initialPinchDistance, setInitialPinchDistance] = useState<number | null>(null);
  const [lastScale, setLastScale] = useState(1);
  const [support, setSupport] = useState<any>(null);
  
  const images = vehicle.images || [];
  const sharePrice = vehicle.current_value ? (vehicle.current_value / 1000).toFixed(2) : '0.00';

  useEffect(() => {
    loadSupport();
  }, [vehicle.id]);

  const loadSupport = async () => {
    const supportData = await CreditsService.getVehicleSupport(vehicle.id);
    setSupport(supportData);
  };

  // Pinch zoom
  const getDistance = (touch1: Touch, touch2: Touch) => {
    const dx = touch1.clientX - touch2.clientX;
    const dy = touch1.clientY - touch2.clientY;
    return Math.sqrt(dx * dx + dy * dy);
  };

  const handleTouchStart = (e: React.TouchEvent) => {
    if (e.touches.length === 1) {
      setTouchStart({ x: e.touches[0].clientX, y: e.touches[0].clientY });
    } else if (e.touches.length === 2) {
      const distance = getDistance(e.touches[0], e.touches[1]);
      setInitialPinchDistance(distance);
      setLastScale(scale);
    }
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (e.touches.length === 2 && initialPinchDistance) {
      e.preventDefault();
      const currentDistance = getDistance(e.touches[0], e.touches[1]);
      const newScale = (currentDistance / initialPinchDistance) * lastScale;
      setScale(Math.min(Math.max(1, newScale), 4));
    }
  };

  const handleTouchEnd = () => {
    if (scale > 1) {
      setInitialPinchDistance(null);
      return;
    }

    if (!touchStart) return;

    // Swipe to change image
    const distance = touchStart.x - (touchStart.x + 50); // Simplified
    if (Math.abs(distance) > 50) {
      if (distance > 0 && currentImageIndex < images.length - 1) {
        setCurrentImageIndex(currentImageIndex + 1);
        setScale(1);
      } else if (distance < 0 && currentImageIndex > 0) {
        setCurrentImageIndex(currentImageIndex - 1);
        setScale(1);
      }
    }

    setTouchStart(null);
    setInitialPinchDistance(null);
  };

  // Calculate AI key metric (placeholder - should be generated by AI)
  const keyMetric = vehicle.key_metric || generateKeyMetric(vehicle);

  // Progress calculation (center-origin)
  const completion = vehicle.completion_percentage || calculateCompletion(vehicle);

  return (
    <div 
      className="vehicle-card-live"
      style={{
        ...styles.card,
        ...(viewMode === 'grid' ? styles.cardGrid : {}),
        ...(viewMode === 'technical' ? styles.cardTechnical : {})
      }}
    >
      {/* Swipeable Images */}
      {images.length > 0 && (
        <div 
          style={styles.imageContainer}
          onTouchStart={handleTouchStart}
          onTouchMove={handleTouchMove}
          onTouchEnd={handleTouchEnd}
        >
          <img
            src={images[currentImageIndex]?.image_url || images[currentImageIndex]}
            alt=""
            style={{
              ...styles.image,
              transform: `scale(${scale})`,
              transformOrigin: 'center center',
              transition: scale === 1 ? 'transform 0.3s' : 'none'
            }}
          />
          {images.length > 1 && (
            <div style={styles.imageDots}>
              {images.map((_: any, i: number) => (
                <div
                  key={i}
                  style={{
                    ...styles.dot,
                    background: i === currentImageIndex ? 'var(--accent)' : 'var(--border)'
                  }}
                />
              ))}
            </div>
          )}
        </div>
      )}

      {/* Card Content */}
      <div style={styles.content}>
        {/* YMM */}
        <div style={styles.ymm}>
          {vehicle.year} {vehicle.make} {vehicle.model}
        </div>

        {/* Financial Data */}
        <div style={styles.financial}>
          <span style={styles.fullPrice} className="font-mono">
            ${vehicle.current_value?.toLocaleString() || '0'}
          </span>
          <span style={styles.sharePrice} className="font-mono">
            ${sharePrice}/share
          </span>
          <span style={styles.volatility}>‚óè‚óè‚óã‚óã‚óã</span>
        </div>

        {/* Location & Metadata */}
        <div style={styles.metadata}>
          {vehicle.location || 'Unknown'} ¬∑ {getTimeAgo(vehicle.updated_at)} 
          {vehicle.viewer_count > 0 && (
            <span> ¬∑ üëÅ {vehicle.viewer_count}</span>
          )}
        </div>

        {/* Owner */}
        <div style={styles.owner}>@{vehicle.owner_username || 'owner'}</div>

        {/* AI Key Metric */}
        <div style={styles.keyMetric}>{keyMetric}</div>

        {/* Center-Origin Progress Bar */}
        <div style={styles.progressContainer}>
          <div style={{
            ...styles.progressBar,
            width: `${completion}%`,
            marginLeft: completion < 50 ? `${50 - completion}%` : '0'
          }} />
        </div>

        {/* Support Stats */}
        {support && support.supporter_count > 0 && (
          <div style={styles.supportStats}>
            üë• {support.supporter_count} supporters ¬∑ 
            üí∞ {CreditsService.formatCredits(support.total_credits)}
          </div>
        )}

        {/* Support Button */}
        <div style={styles.actions}>
          <SupportVehicleButton
            vehicleId={vehicle.id}
            vehicleName={`${vehicle.year} ${vehicle.make} ${vehicle.model}`}
          />
        </div>

        {/* Live Indicators */}
        {vehicle.is_live && (
          <div style={styles.liveBadge}>üî¥ LIVE</div>
        )}
      </div>
    </div>
  );
};

// Helper functions
const generateKeyMetric = (vehicle: any): string => {
  // Placeholder - should call AI
  const metrics = [
    'Rare 4-speed manual',
    'Original paint',
    'LS swap potential',
    'Low mileage survivor',
    'Desert truck, no rust',
    'Matching numbers'
  ];
  return metrics[Math.floor(Math.random() * metrics.length)];
};

const calculateCompletion = (vehicle: any): number => {
  // Placeholder - should calculate from timeline events
  return Math.random() * 100;
};

const getTimeAgo = (timestamp: string): string => {
  const now = new Date();
  const then = new Date(timestamp);
  const seconds = Math.floor((now.getTime() - then.getTime()) / 1000);
  
  if (seconds < 60) return 'just now';
  if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
  return `${Math.floor(seconds / 86400)}d ago`;
};

const styles = {
  card: {
    background: 'var(--surface)',
    border: '1px solid var(--border)',
    borderRadius: '4px',
    overflow: 'hidden',
    transition: 'border-color 0.1s, transform 0.1s',
    cursor: 'pointer'
  },
  cardGrid: {
    // Smaller for grid view
  },
  cardTechnical: {
    // Dense for technical view
  },
  imageContainer: {
    position: 'relative' as const,
    width: '100%',
    height: '200px',
    background: '#000',
    overflow: 'hidden',
    touchAction: 'pan-y pinch-zoom' as const
  },
  image: {
    width: '100%',
    height: '100%',
    objectFit: 'cover' as const,
    userSelect: 'none' as const
  },
  imageDots: {
    position: 'absolute' as const,
    bottom: '8px',
    left: '50%',
    transform: 'translateX(-50%)',
    display: 'flex',
    gap: '4px'
  },
  dot: {
    width: '6px',
    height: '6px',
    borderRadius: '50%',
    transition: 'background 0.2s'
  },
  content: {
    padding: '8px'
  },
  ymm: {
    fontSize: '11px',
    fontWeight: 'bold' as const,
    color: 'var(--text)',
    marginBottom: '4px'
  },
  financial: {
    display: 'flex',
    alignItems: 'baseline',
    gap: '8px',
    marginBottom: '4px'
  },
  fullPrice: {
    fontSize: '11px',
    color: 'var(--text)',
    fontWeight: 'bold' as const
  },
  sharePrice: {
    fontSize: '8px',
    color: 'var(--text-secondary)'
  },
  volatility: {
    fontSize: '8px',
    color: 'var(--text-secondary)'
  },
  metadata: {
    fontSize: '8px',
    color: 'var(--text-secondary)',
    marginBottom: '4px'
  },
  owner: {
    fontSize: '8px',
    color: 'var(--text-secondary)',
    marginBottom: '4px'
  },
  keyMetric: {
    fontSize: '8px',
    color: 'var(--text)',
    fontStyle: 'italic' as const,
    marginBottom: '6px'
  },
  progressContainer: {
    height: '4px',
    background: 'var(--surface-hover)',
    borderRadius: '2px',
    overflow: 'hidden',
    position: 'relative' as const
  },
  progressBar: {
    height: '100%',
    background: 'var(--accent)',
    transition: 'width 0.3s, margin-left 0.3s'
  },
  supportStats: {
    fontSize: '8px',
    color: 'var(--text-secondary)',
    marginTop: '6px',
    marginBottom: '8px'
  },
  actions: {
    marginTop: '8px'
  },
  liveBadge: {
    position: 'absolute' as const,
    top: '8px',
    right: '8px',
    background: '#ff0000',
    color: '#ffffff',
    fontSize: '8px',
    padding: '3px 6px',
    borderRadius: '3px',
    fontWeight: 'bold' as const
  }
};

