name: Sync Secrets to Vercel

on:
  # Run manually from the Actions tab
  workflow_dispatch:
  
  # Run when secrets are updated in GitHub
  # Note: Only runs when repository secrets are updated through the GitHub UI
  repository_dispatch:
    types: [secrets_updated]
  
  # Run when pushing to main (optional, remove if you prefer manual trigger only)
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sync-vercel-secrets.yml'

jobs:
  sync-secrets:
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Debug Vercel Credentials
        run: |
          echo "Checking Vercel credentials availability..."
          echo "VERCEL_ORG_ID exists: $(if [ -n \"$VERCEL_ORG_ID\" ]; then echo \"YES\"; else echo \"NO\"; fi)"
          echo "VERCEL_PROJECT_ID exists: $(if [ -n \"$VERCEL_PROJECT_ID\" ]; then echo \"YES\"; else echo \"NO\"; fi)"
          echo "VERCEL_TOKEN exists: $(if [ -n \"${{ secrets.VERCEL_TOKEN }}\" ]; then echo \"YES\"; else echo \"NO\"; fi)"
      
      - name: Setup Vercel CLI
        run: |
          echo "Setting up Vercel CLI with token..."
          # Create a .vercel/project.json file
          mkdir -p .vercel
          echo "{\"orgId\":\"$VERCEL_ORG_ID\",\"projectId\":\"$VERCEL_PROJECT_ID\"}" > .vercel/project.json
          
          # Debug the created config
          echo "Created Vercel project config:"
          cat .vercel/project.json | sed 's/\"orgId\":\"[^\"]*\"/\"orgId\":\"***\"/g' | sed 's/\"projectId\":\"[^\"]*\"/\"projectId\":\"***\"/g'
      
      - name: Pull Existing Environment Variables
        id: pull_env
        run: |
          echo "Pulling existing environment variables..."
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} || {
            echo "⚠️ Failed to pull environment variables, but continuing with synchronization"
            echo "pull_failed=true" >> $GITHUB_OUTPUT
          }
      
      - name: Check Supabase Credentials Availability
        id: check_creds
        run: |
          # Check if Supabase credentials are available in GitHub secrets
          if [ -n "${{ secrets.VITE_SUPABASE_URL }}" ]; then
            echo "SUPABASE_URL_EXISTS=true" >> $GITHUB_OUTPUT
            echo "✅ VITE_SUPABASE_URL secret is available"
          else
            echo "SUPABASE_URL_EXISTS=false" >> $GITHUB_OUTPUT
            echo "⚠️ VITE_SUPABASE_URL secret is empty or not available!"
          fi
          
          if [ -n "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then
            echo "SUPABASE_ANON_KEY_EXISTS=true" >> $GITHUB_OUTPUT
            echo "✅ VITE_SUPABASE_ANON_KEY secret is available"
          else
            echo "SUPABASE_ANON_KEY_EXISTS=false" >> $GITHUB_OUTPUT
            echo "⚠️ VITE_SUPABASE_ANON_KEY secret is empty or not available!"
          fi
          
          if [ -n "${{ secrets.VITE_SUPABASE_SERVICE_KEY }}" ]; then
            echo "SUPABASE_SERVICE_KEY_EXISTS=true" >> $GITHUB_OUTPUT
            echo "✅ VITE_SUPABASE_SERVICE_KEY secret is available"
          else
            echo "SUPABASE_SERVICE_KEY_EXISTS=false" >> $GITHUB_OUTPUT
            echo "⚠️ VITE_SUPABASE_SERVICE_KEY secret is empty or not available!"
          fi
      
      - name: List Current Vercel Environment Variables
        run: |
          echo "Checking current Vercel environment variables..."
          vercel env ls production --token=${{ secrets.VERCEL_TOKEN }} || echo "⚠️ Failed to list environment variables, but continuing"
      
      - name: Sync Supabase Secrets to Vercel
        id: sync_secrets
        run: |
          # Set Vercel environment variables from GitHub secrets
          echo "Synchronizing environment variables to Vercel Production environment..."
          
          # First remove any existing variables to avoid duplicate errors
          echo "Removing existing environment variables if they exist..."
          vercel env rm VITE_SUPABASE_URL production --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "⚠️ Failed to remove VITE_SUPABASE_URL or it doesn't exist"
          vercel env rm VITE_SUPABASE_ANON_KEY production --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "⚠️ Failed to remove VITE_SUPABASE_ANON_KEY or it doesn't exist"
          vercel env rm VITE_SUPABASE_SERVICE_KEY production --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "⚠️ Failed to remove VITE_SUPABASE_SERVICE_KEY or it doesn't exist"
          
          # Track success status
          SYNC_SUCCESS=true
          
          # Add VITE_SUPABASE_URL if it exists
          if [ "${{ steps.check_creds.outputs.SUPABASE_URL_EXISTS }}" = "true" ]; then
            echo "Adding VITE_SUPABASE_URL to Vercel..."
            echo "${{ secrets.VITE_SUPABASE_URL }}" | vercel env add VITE_SUPABASE_URL production --token=${{ secrets.VERCEL_TOKEN }} || {
              echo "⚠️ Failed to add VITE_SUPABASE_URL to Vercel"
              SYNC_SUCCESS=false
            }
          else
            echo "⚠️ Skipping VITE_SUPABASE_URL (not available in secrets)"
            SYNC_SUCCESS=false
          fi
          
          # Add VITE_SUPABASE_ANON_KEY if it exists
          if [ "${{ steps.check_creds.outputs.SUPABASE_ANON_KEY_EXISTS }}" = "true" ]; then
            echo "Adding VITE_SUPABASE_ANON_KEY to Vercel..."
            echo "${{ secrets.VITE_SUPABASE_ANON_KEY }}" | vercel env add VITE_SUPABASE_ANON_KEY production --token=${{ secrets.VERCEL_TOKEN }} || {
              echo "⚠️ Failed to add VITE_SUPABASE_ANON_KEY to Vercel"
              SYNC_SUCCESS=false
            }
          else
            echo "⚠️ Skipping VITE_SUPABASE_ANON_KEY (not available in secrets)"
            SYNC_SUCCESS=false
          fi
          
          # Add VITE_SUPABASE_SERVICE_KEY if it exists
          if [ "${{ steps.check_creds.outputs.SUPABASE_SERVICE_KEY_EXISTS }}" = "true" ]; then
            echo "Adding VITE_SUPABASE_SERVICE_KEY to Vercel..."
            echo "${{ secrets.VITE_SUPABASE_SERVICE_KEY }}" | vercel env add VITE_SUPABASE_SERVICE_KEY production --token=${{ secrets.VERCEL_TOKEN }} || {
              echo "⚠️ Failed to add VITE_SUPABASE_SERVICE_KEY to Vercel"
              SYNC_SUCCESS=false
            }
          else
            echo "⚠️ Skipping VITE_SUPABASE_SERVICE_KEY (not available in secrets)"
            SYNC_SUCCESS=false
          fi
          
          # Set output for following steps
          if [ "$SYNC_SUCCESS" = "true" ]; then
            echo "sync_complete=true" >> $GITHUB_OUTPUT
            echo "✅ Successfully synchronized all available environment variables"
          else
            echo "sync_complete=false" >> $GITHUB_OUTPUT
            echo "⚠️ Synchronization completed with warnings or errors"
          fi
      
      - name: Verify Environment Variables
        run: |
          echo "Verifying environment variables after synchronization..."
          vercel env ls production --token=${{ secrets.VERCEL_TOKEN }} || echo "⚠️ Failed to list environment variables after sync"
      
      - name: Trigger Vercel Deployment
        if: steps.sync_secrets.outputs.sync_complete == 'true'
        run: |
          echo "Triggering production deployment with updated environment variables..."
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --yes || echo "⚠️ Failed to trigger Vercel deployment"
      
      - name: Deployment Warning
        if: steps.sync_secrets.outputs.sync_complete != 'true'
        run: |
          echo "⚠️ Some environment variables could not be synchronized."
          echo "Deployment not triggered automatically to prevent issues."
          echo "You may need to manually deploy after fixing the environment variable issues."
