name: Environment Variable Monitor

on:
  workflow_dispatch:  # Can be triggered manually
  # Run after the smart repair orchestrator completes
  workflow_run:
    workflows: ["Smart Repair Orchestrator"]
    types:
      - completed
    branches:
      - main
  # Also run when environment-related files change
  push:
    branches:
      - main
    paths:
      - 'src/**/*.tsx'
      - 'src/**/*.ts'
      - '.env*'
      - 'supabase/**'
  schedule:
    - cron: '0 */12 * * *'  # Run every 12 hours

# Permissions needed for creating PRs and issues
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  analyze-env-variables:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Detect project structure
        id: detect-structure
        run: |
          # Initialize variables with safe defaults
          echo "FALLBACK_DETECTED=false" >> $GITHUB_ENV
          echo "USES_SUPABASE=false" >> $GITHUB_ENV
          echo "HAS_ENV_INJECT=false" >> $GITHUB_ENV
          echo "HAS_VERCEL_CONFIG=false" >> $GITHUB_ENV
          
          # Check for various environment or Supabase usage patterns
          if grep -q "import.meta.env" $(find src -type f -name "*.ts" -o -name "*.tsx" | head -50) 2>/dev/null; then
            echo "Found Vite environment variable usage (import.meta.env)"
            echo "FALLBACK_DETECTED=true" >> $GITHUB_ENV
          fi
          
          if grep -q "process.env" $(find src -type f -name "*.ts" -o -name "*.tsx" | head -50) 2>/dev/null; then
            echo "Found Node environment variable usage (process.env)"
            echo "FALLBACK_DETECTED=true" >> $GITHUB_ENV
          fi
          
          if grep -q "window.__env" $(find src -type f -name "*.ts" -o -name "*.tsx" | head -50) 2>/dev/null; then
            echo "Found browser environment variable usage (window.__env)"
            echo "FALLBACK_DETECTED=true" >> $GITHUB_ENV
          fi
          
          # Check for Supabase usage
          if grep -q "createClient" $(find src -type f -name "*.ts" -o -name "*.tsx" | head -50) 2>/dev/null || [ -d "supabase" ]; then
            echo "Detected Supabase usage"
            echo "USES_SUPABASE=true" >> $GITHUB_ENV
          fi
          
          # Check environment injection script
          if [ -f "scripts/inject-env.js" ]; then
            echo "Found environment injection script"
            echo "HAS_ENV_INJECT=true" >> $GITHUB_ENV
          else
            echo "No environment injection script found"
          fi
          
          # Check Vercel configuration
          if [ -f "vercel.json" ]; then
            echo "Found Vercel configuration"
            echo "HAS_VERCEL_CONFIG=true" >> $GITHUB_ENV
          else
            echo "No Vercel configuration found"
          fi
      
      - name: Create or update environment helper
        if: ${{ env.FALLBACK_DETECTED == 'true' && env.USES_SUPABASE == 'true' }}
        run: |
          # Skip creating environment.ts if it already exists
          if [ -f "src/utils/environment.ts" ]; then
            echo "Environment helper already exists, skipping creation"
          else
            echo "Creating environment helper with three-tier fallback system..."
            
            # Create utils directory if it doesn't exist
            mkdir -p src/utils
            
            # Create environment.ts file with the three-tier fallback
            cat > src/utils/environment.ts << EOF
          /**
           * Environment utilities for handling variables using the three-tier fallback system
           * 1. First checks import.meta.env (Vite)
           * 2. Then checks process.env (Node)
           * 3. Finally checks window.__env (Browser runtime)
           */
          
          /**
           * Gets an environment variable value from various sources with fallbacks
           * @param key The environment variable key
           * @param defaultValue Optional default value if environment variable is not found
           * @returns The environment variable value or default value
           */
          export const getEnv = (key: string, defaultValue: string = ''): string => {
            // First try Vite's import.meta.env
            if (typeof import.meta !== 'undefined' && 
                import.meta.env && 
                import.meta.env[key] !== undefined) {
              return import.meta.env[key];
            }
            
            // Then try Node's process.env
            if (typeof process !== 'undefined' && 
                process.env && 
                process.env[key] !== undefined) {
              return process.env[key];
            }
            
            // Finally try window.__env for runtime injected variables
            if (typeof window !== 'undefined' && 
                window.__env && 
                window.__env[key] !== undefined) {
              return window.__env[key];
            }
            
            // Return default value if not found anywhere
            return defaultValue;
          };
          
          /**
           * Checks if an environment variable is defined in any context
           * @param key The environment variable key
           * @returns boolean indicating if the variable exists
           */
          export const hasEnv = (key: string): boolean => {
            return (
              (typeof import.meta !== 'undefined' && import.meta.env && import.meta.env[key] !== undefined) ||
              (typeof process !== 'undefined' && process.env && process.env[key] !== undefined) ||
              (typeof window !== 'undefined' && window.__env && window.__env[key] !== undefined)
            );
          };
          
          /**
           * Environment variable type declaration for TypeScript
           */
          declare global {
            interface Window {
              __env?: Record<string, any>;
            }
          }
          EOF
          fi
      
      - name: Create environment variable injection script
        if: ${{ env.HAS_ENV_INJECT != 'true' && env.USES_SUPABASE == 'true' }}
        run: |
          echo "Creating environment variable injection script..."
          
          # Create scripts directory if it doesn't exist
          mkdir -p scripts
          
          # Create inject-env.js script to handle runtime environment variables
          cat > scripts/inject-env.js << EOF
          /**
           * This script injects environment variables into the built HTML file
           * for use in production static deployments.
           */
          const fs = require('fs');
          const path = require('path');
          
          // Path to the built index.html
          const indexPath = path.resolve(__dirname, '../dist/index.html');
          
          // Environment variables to inject (only VITE_ prefixed ones for security)
          const envVars = Object.keys(process.env)
            .filter(key => key.startsWith('VITE_'))
            .reduce((obj, key) => {
              obj[key] = process.env[key];
              return obj;
            }, {});
          
          // Read the built index.html
          fs.readFile(indexPath, 'utf8', (err, data) => {
            if (err) {
              console.error('Error reading index.html:', err);
              process.exit(1);
            }
          
            // Create the environment variables script tag
            const envScript = \`
              <script>
                window.__env = \${JSON.stringify(envVars, null, 2)};
              </script>
            \`;
          
            // Insert the script tag before the closing </head> tag
            const updatedHTML = data.replace('</head>', \`\${envScript}</head>\`);
          
            // Write the updated index.html
            fs.writeFile(indexPath, updatedHTML, 'utf8', err => {
              if (err) {
                console.error('Error writing updated index.html:', err);
                process.exit(1);
              }
              console.log('Environment variables successfully injected into index.html');
            });
          });
          EOF
          
          echo "Created environment variable injection script"
          
          # Add the script to package.json build process if needed
          if grep -q "\"build\":" package.json && ! grep -q "inject-env.js" package.json; then
            echo "Updating package.json to include injection script in build process..."
            sed -i 's/"build": "vite build"/"build": "vite build \&\& node scripts\/inject-env.js"/' package.json
          fi
      
      - name: Verify environment variables in Dockerfile
        if: ${{ env.USES_SUPABASE == 'true' }}
        run: |
          if [ -f "Dockerfile" ]; then
            echo "Checking Dockerfile for environment variable handling..."
            
            # Check if ARG is used for environment variables
            if ! grep -q "ARG VITE_SUPABASE" Dockerfile; then
              echo "Updating Dockerfile to handle Supabase environment variables..."
              
              # Append ARG declarations if not present
              cat >> Dockerfile << EOF
          
          # Environment variables
          ARG VITE_SUPABASE_URL
          ARG VITE_SUPABASE_ANON_KEY
          ARG VITE_SUPABASE_SERVICE_KEY
          
          # Pass environment variables to the build process
          ENV VITE_SUPABASE_URL=\${VITE_SUPABASE_URL}
          ENV VITE_SUPABASE_ANON_KEY=\${VITE_SUPABASE_ANON_KEY}
          ENV VITE_SUPABASE_SERVICE_KEY=\${VITE_SUPABASE_SERVICE_KEY}
          EOF
            fi
          else
            echo "No Dockerfile found, skipping"
          fi
      
      - name: Create verify-env.js script
        if: ${{ env.USES_SUPABASE == 'true' }}
        run: |
          echo "Creating environment variable verification script..."
          
          # Create scripts directory if it doesn't exist
          mkdir -p scripts
          
          # Create verify-env.js script
          cat > scripts/verify-env.js << EOF
          /**
           * This script verifies that the necessary environment variables are available
           * after building. It should be run after the build process completes.
           */
          const fs = require('fs');
          const path = require('path');
          
          // Path to the built index.html
          const indexPath = path.resolve(__dirname, '../dist/index.html');
          
          // Required environment variables
          const requiredVars = [
            'VITE_SUPABASE_URL',
            'VITE_SUPABASE_ANON_KEY'
          ];
          
          // Check if the built HTML contains the environment variables
          fs.readFile(indexPath, 'utf8', (err, data) => {
            if (err) {
              console.error('Error reading built index.html:', err);
              process.exit(1);
            }
            
            // Check if window.__env is present
            if (!data.includes('window.__env')) {
              console.error('Error: window.__env is not defined in the built index.html');
              console.error('Make sure inject-env.js script ran correctly during build');
              process.exit(1);
            }
            
            // Check for each required variable placeholder
            let missingVars = [];
            for (const varName of requiredVars) {
              if (!data.includes(varName)) {
                missingVars.push(varName);
              }
            }
            
            if (missingVars.length > 0) {
              console.error(\`Error: Missing environment variables in the built HTML: \${missingVars.join(', ')}\`);
              console.error('Make sure these variables are defined during build time');
              process.exit(1);
            }
            
            console.log('Environment variable verification successful!');
          });
          EOF
          
          echo "Created environment variable verification script"
          
          # Add the script to package.json if needed
          if grep -q "\"build\":" package.json && ! grep -q "verify-env.js" package.json; then
            echo "Consider adding 'node scripts/verify-env.js' to your build script to verify environment variables"
          fi
      
      - name: Create sync-vercel-secrets workflow
        if: ${{ env.HAS_VERCEL_CONFIG == 'true' && env.USES_SUPABASE == 'true' }}
        run: |
          echo "Creating Vercel secrets synchronization workflow..."
          
          # Create workflow directory if it doesn't exist
          mkdir -p .github/workflows
          
          # Create sync-vercel-secrets.yml workflow
          cat > .github/workflows/sync-vercel-secrets.yml << EOF
          name: Sync Vercel Secrets
          
          on:
            workflow_dispatch:  # Can be triggered manually
            schedule:
              - cron: '0 0 * * 1'  # Run weekly on Mondays
          
          jobs:
            sync-secrets:
              runs-on: ubuntu-latest
              
              steps:
                - name: Checkout repository
                  uses: actions/checkout@v3
                
                - name: Setup Node.js
                  uses: actions/setup-node@v3
                  with:
                    node-version: '18'
                
                - name: Install Vercel CLI
                  run: npm install --global vercel@latest
                
                - name: Sync GitHub Secrets to Vercel
                  env:
                    VERCEL_TOKEN: \${{ secrets.VERCEL_TOKEN }}
                    VITE_SUPABASE_URL: \${{ secrets.VITE_SUPABASE_URL }}
                    VITE_SUPABASE_ANON_KEY: \${{ secrets.VITE_SUPABASE_ANON_KEY }}
                    VITE_SUPABASE_SERVICE_KEY: \${{ secrets.VITE_SUPABASE_SERVICE_KEY }}
                  run: |
                    # Login to Vercel
                    vercel login --token \$VERCEL_TOKEN
                    
                    # Get project info from vercel.json
                    PROJECT_NAME=\$(cat vercel.json | grep -o '"name": "[^"]*' | cut -d'"' -f4)
                    
                    # Sync each secret from GitHub to Vercel
                    echo "Syncing VITE_SUPABASE_URL..."
                    vercel env add VITE_SUPABASE_URL production \$VITE_SUPABASE_URL --token \$VERCEL_TOKEN --yes
                    
                    echo "Syncing VITE_SUPABASE_ANON_KEY..."
                    vercel env add VITE_SUPABASE_ANON_KEY production \$VITE_SUPABASE_ANON_KEY --token \$VERCEL_TOKEN --yes
                    
                    echo "Syncing VITE_SUPABASE_SERVICE_KEY..."
                    vercel env add VITE_SUPABASE_SERVICE_KEY production \$VITE_SUPABASE_SERVICE_KEY --token \$VERCEL_TOKEN --yes
                    
                    echo "Secrets synchronized successfully!"
          EOF
          
          echo "Created sync-vercel-secrets workflow"
      
      - name: Create PR with environment improvements
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Create a branch for the PR
          BRANCH_NAME="fix/environment-variables-$(date +%s)"
          git checkout -b $BRANCH_NAME
          
          # Check if we made any changes
          if git status --porcelain | grep -q .; then
            # Add all changes
            git add src/utils/environment.ts scripts/inject-env.js scripts/verify-env.js .github/workflows/sync-vercel-secrets.yml || true
            
            # Commit the changes
            git commit -m "Fix: Implement environment variable handling best practices" || true
            
            # Push the branch
            git push origin $BRANCH_NAME
            
            # Create the PR
            PR_URL=$(gh pr create --title "Fix: Environment Variable Handling" \
              --body "This PR implements best practices for environment variable handling:
              
              - Creates a three-tier fallback system for environment variables
              - Adds runtime environment injection for static deployments
              - Ensures all Supabase credentials are properly available
              - Synchronizes environment variables between GitHub and Vercel
              
              Please review and merge to improve the reliability of your deployments." \
              --base main \
              --head $BRANCH_NAME)
            
            echo "Created PR: $PR_URL"
          else
            echo "No changes needed, environment variable handling is already optimal!"
          fi
