name: Docker CI/CD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'test'
        type: choice
        options:
          - development
          - test
          - production
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          # Copy production env file
          cp .env.production.example .env.production
          # Build the application
          npm run build
        env:
          NODE_ENV: production
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          buildkitd-flags: --debug
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      
      - name: Set environment variables
        id: env
        run: |
          ENV_NAME=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'test') }}
          echo "environment=$ENV_NAME" >> $GITHUB_OUTPUT
          
          # Load environment config
          CONFIG_TYPE=$(node -e "console.log(require('./.github/workflows/config/env-config.js')['$ENV_NAME'].services.type)")
          
          # Set mock flags based on environment
          if [[ "$ENV_NAME" == "test" ]]; then
            echo "use_mock_data=true" >> $GITHUB_OUTPUT
            echo "mock_webgl=true" >> $GITHUB_OUTPUT
          else
            echo "use_mock_data=false" >> $GITHUB_OUTPUT
            echo "mock_webgl=false" >> $GITHUB_OUTPUT
          fi
          
          # Set environment variables from secrets
          echo "supabase_url=${{ secrets.VITE_SUPABASE_URL }}" >> $GITHUB_OUTPUT

      - name: Build and test image
        id: build
        uses: docker/build-push-action@v5
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=${{ steps.env.outputs.environment }}
            VITE_APP_NAME=Nuke
            VITE_APP_DESCRIPTION=Vehicle Management Platform
            VITE_SUPABASE_URL=${{ steps.env.outputs.supabase_url }}
            VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
            VITE_USE_MOCK_DATA=${{ steps.env.outputs.use_mock_data }}
            VITE_MOCK_WEBGL=${{ steps.env.outputs.mock_webgl }}
      
      - name: Test container
        id: test
        run: |
          set -e
          CONTAINER_NAME="test-nuke-${{ github.run_id }}"
          echo "üöÄ Starting container for testing..."
          
          # Run container in background
          docker run -d --name $CONTAINER_NAME -p 8080:8080 ${{ steps.meta.outputs.tags }}
          
          echo "‚è≥ Waiting for container to be ready..."
          # Wait for container to be ready (max 30s)
          timeout 30s bash -c 'until curl -s http://localhost:8080/ > /dev/null; do echo "Waiting for service..."; sleep 2; done'
          
          echo "üß™ Running tests..."
          # Run environment-specific tests
          if [[ "${{ steps.env.outputs.environment }}" != "production" ]]; then
            echo "üß™ Running test environment checks..."
            curl -f http://localhost:8080/health || {
              echo "‚ùå Health check failed"
              docker logs $CONTAINER_NAME
              exit 1
            }
          else
            echo "üîç Running production verification..."
            curl -f http://localhost:8080/ || {
              echo "‚ùå Production check failed"
              docker logs $CONTAINER_NAME
              exit 1
            }
          fi
          
          echo "‚úÖ Tests passed successfully"
          docker stop $CONTAINER_NAME
          docker rm $CONTAINER_NAME
      
      - name: Push image
        if: github.event_name != 'pull_request' && success()
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_ENV=production
            VITE_APP_NAME=Nuke
            VITE_APP_DESCRIPTION=Vehicle Management Platform
            VITE_SUPABASE_URL=${{ steps.env.outputs.supabase_url }}
            VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
            VITE_USE_MOCK_DATA=false
            VITE_MOCK_WEBGL=false
      
      - name: Verify deployment
        if: github.event_name != 'pull_request' && success()
        run: |
          echo "‚úÖ Docker image deployed successfully"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "üè∑Ô∏è Tags:"
          echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n'
      
      - name: Handle Failure
        if: failure()
        run: |
          echo "‚ùå Workflow failed!"
          echo "Please check:"
          echo "1. GitHub token permissions and Docker Hub connection"
          echo "2. Environment variables (VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY)"
          echo "3. Build logs for detailed error messages"
          exit 1
      
      - name: Clean up
        if: always()
        run: |
          echo "üßπ Cleaning up resources..."
          docker system prune -f
          docker volume prune -f 