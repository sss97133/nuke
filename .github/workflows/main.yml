name: Main Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours

jobs:
  security_check:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      continue-on-error: true  # Allow continuation even if CodeQL setup fails

    - name: Check for sensitive data
      run: |
        echo "üîç Checking for sensitive data patterns..."
        if git diff --cached | grep -E "(password|secret|key|token|api_key|auth)" > /dev/null; then
          echo "‚ö†Ô∏è Found potentially sensitive data patterns"
          echo "Please review the changes carefully"
        fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      continue-on-error: true  # Allow continuation even if analysis fails

  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security_check
    
    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      VITE_SUPABASE_SERVICE_KEY: ${{ secrets.VITE_SUPABASE_SERVICE_KEY }}
      VITE_ENV: production
      VITE_API_URL: https://nuke-kohl.vercel.app/api
      VITE_ENABLE_DEBUG: false
      VITE_ENABLE_MOCK_DATA: false
      VITE_APP_NAME: "Nuke"
      VITE_APP_DESCRIPTION: "Vehicle Management Platform"
      VITE_ENABLE_ANALYTICS: true
      VITE_DEFAULT_THEME: system
      NODE_OPTIONS: "--max-old-space-size=4096"
      NODE_ENV: production
      TAILWIND_MODE: build
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Setup .npmrc
      run: |
        echo "legacy-peer-deps=true" > .npmrc
        echo "fund=false" >> .npmrc
        echo "audit=false" >> .npmrc
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          **/node_modules
          ~/.npm
          ${{ github.workspace }}/.next/cache
        key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-modules-
          
    - name: Install dependencies
      run: |
        # Retry npm ci up to 3 times
        for i in 1 2 3; do
          npm ci && break || echo "Retry $i..."
          sleep 5
        done
      
    - name: Type check
      run: npm run type-check
      continue-on-error: true  # Don't fail the build for type errors yet
      
    - name: Lint
      run: npm run lint
      continue-on-error: true  # Don't fail the build for lint errors yet
      
    - name: Run tests
      run: npm run test:ci
      continue-on-error: true  # Don't fail the build for test failures yet
      
    - name: Build project
      run: npm run build

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Deploy to Vercel (Production)
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        # Retry deployment up to 3 times
        for i in 1 2 3; do
          if vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} && \
             vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}; then
            break
          else
            echo "Deployment attempt $i failed..."
            if [ $i -eq 3 ]; then
              echo "‚ùå All deployment attempts failed"
              exit 1
            fi
            sleep 10
          fi
        done

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deployment successful"
        else
          echo "‚ùå Deployment failed"
          echo "Check the logs above for more details"
        fi 