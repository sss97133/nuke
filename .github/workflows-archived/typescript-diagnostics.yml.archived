name: TypeScript Diagnostics

on:
  # Run manually from the Actions tab
  workflow_dispatch:
  # Run on pull requests
  pull_request:
    branches: [ main, development ]
    paths:
      - '**.ts'
      - '**.tsx'
      - 'tsconfig.json'
      - 'package.json'
  # Optional: Run on push to main branches
  # push:
  #   branches: [ main ]
  #   paths:
  #     - '**.ts'
  #     - '**.tsx'

jobs:
  analyze-typescript:
    name: Analyze TypeScript Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate full TypeScript error report
        id: full-report
        run: |
          # Create reports directory
          mkdir -p reports
          
          # Run TypeScript compiler in noEmit mode to get all errors
          npx tsc --noEmit > reports/typescript-all-errors.txt || true
          
          # Count total number of errors
          ERROR_COUNT=$(grep -c "error TS" reports/typescript-all-errors.txt || echo "0")
          echo "Total TypeScript errors found: $ERROR_COUNT"
          echo "error-count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          
          # Generate summary for PR comment
          echo "# TypeScript Diagnostic Results" > reports/summary.md
          echo "Found $ERROR_COUNT TypeScript errors" >> reports/summary.md
          
          if [ "$ERROR_COUNT" -gt "0" ]; then
            echo "## Error Categories" >> reports/summary.md
          fi

      - name: Categorize errors
        if: steps.full-report.outputs.error-count > 0
        run: |
          # Categorize errors by type
          echo "### Null/Undefined Errors" > reports/null-errors.md
          grep -E "TS2531|TS2532|TS2533|TS2322.*null|TS2322.*undefined" reports/typescript-all-errors.txt >> reports/null-errors.md || echo "No null/undefined errors found" >> reports/null-errors.md
          
          echo "### Type Definition Errors" > reports/type-definition-errors.md
          grep -E "TS2304|TS2307|TS2344|TS2749" reports/typescript-all-errors.txt >> reports/type-definition-errors.md || echo "No type definition errors found" >> reports/type-definition-errors.md
          
          echo "### Type Mismatch Errors" > reports/type-mismatch-errors.md
          grep -E "TS2322|TS2345|TS2739" reports/typescript-all-errors.txt | grep -v "null" | grep -v "undefined" >> reports/type-mismatch-errors.md || echo "No type mismatch errors found" >> reports/type-mismatch-errors.md
          
          echo "### Property Access Errors" > reports/property-access-errors.md
          grep -E "TS2339|TS2551|TS2571" reports/typescript-all-errors.txt >> reports/property-access-errors.md || echo "No property access errors found" >> reports/property-access-errors.md
          
          echo "### 'any' Type Usage Errors" > reports/any-type-errors.md
          grep -E "TS7005|TS7006|TS7031" reports/typescript-all-errors.txt >> reports/any-type-errors.md || echo "No 'any' type usage errors found" >> reports/any-type-errors.md
          
          echo "### Other Errors" > reports/other-errors.md
          grep "error TS" reports/typescript-all-errors.txt | grep -v -E "TS2531|TS2532|TS2533|TS2322.*null|TS2322.*undefined|TS2304|TS2307|TS2344|TS2749|TS2322|TS2345|TS2739|TS2339|TS2551|TS2571|TS7005|TS7006|TS7031" >> reports/other-errors.md || echo "No other errors found" >> reports/other-errors.md
          
          # Update summary with error counts by category
          NULL_COUNT=$(grep -c "TS" reports/null-errors.md || echo "0")
          TYPE_DEF_COUNT=$(grep -c "TS" reports/type-definition-errors.md || echo "0")
          TYPE_MISMATCH_COUNT=$(grep -c "TS" reports/type-mismatch-errors.md || echo "0")
          PROP_ACCESS_COUNT=$(grep -c "TS" reports/property-access-errors.md || echo "0")
          ANY_TYPE_COUNT=$(grep -c "TS" reports/any-type-errors.md || echo "0")
          OTHER_COUNT=$(grep -c "TS" reports/other-errors.md || echo "0")
          
          echo "- 🚫 **Null/Undefined Errors**: $NULL_COUNT" >> reports/summary.md
          echo "- 📝 **Type Definition Errors**: $TYPE_DEF_COUNT" >> reports/summary.md
          echo "- ⚠️ **Type Mismatch Errors**: $TYPE_MISMATCH_COUNT" >> reports/summary.md
          echo "- 🔑 **Property Access Errors**: $PROP_ACCESS_COUNT" >> reports/summary.md
          echo "- 🤔 **'any' Type Usage**: $ANY_TYPE_COUNT" >> reports/summary.md
          echo "- 🔄 **Other Errors**: $OTHER_COUNT" >> reports/summary.md
          
          echo "## Recommendations" >> reports/summary.md
          echo "Based on these results, focus on:" >> reports/summary.md
          
          if [ "$NULL_COUNT" -gt "10" ]; then
            echo "- Adding proper null checks and optional chaining" >> reports/summary.md
          fi
          
          if [ "$TYPE_DEF_COUNT" -gt "10" ]; then
            echo "- Creating missing interfaces and type definitions" >> reports/summary.md
          fi
          
          if [ "$TYPE_MISMATCH_COUNT" -gt "10" ]; then
            echo "- Ensuring proper type compatibility between values" >> reports/summary.md
          fi
          
          if [ "$PROP_ACCESS_COUNT" -gt "10" ]; then
            echo "- Verifying property existence before access" >> reports/summary.md
          fi
          
          if [ "$ANY_TYPE_COUNT" -gt "10" ]; then
            echo "- Replacing 'any' types with proper interfaces" >> reports/summary.md
          fi
          
          # List files with most errors
          echo "## Files with Most Errors" >> reports/summary.md
          grep -o "src/.*\.tsx\?:[0-9]*:[0-9]*" reports/typescript-all-errors.txt | cut -d':' -f1 | sort | uniq -c | sort -nr | head -10 | awk '{print "- **" $1 "** errors in `" $2 "`"}' >> reports/summary.md
          
          # Add link to all reports
          cat reports/summary.md

      - name: Generate detailed vehicle data validation report
        if: steps.full-report.outputs.error-count > 0
        run: |
          # Create vehicle data specific report
          echo "## Vehicle Data Handling Errors" > reports/vehicle-data-errors.md
          
          # Look for errors in timeline/vehicle related files
          grep -E "src/components/Vehicle.*\.tsx?|src/.*timeline.*\.tsx?|src/services/vehicle.*\.tsx?" reports/typescript-all-errors.txt > reports/vehicle-data-errors.txt || true
          
          # Count vehicle data related errors
          VEHICLE_ERROR_COUNT=$(grep -c "TS" reports/vehicle-data-errors.txt || echo "0")
          
          if [ "$VEHICLE_ERROR_COUNT" -gt "0" ]; then
            echo "Found $VEHICLE_ERROR_COUNT errors in vehicle data handling code." >> reports/vehicle-data-errors.md
            echo "### Null checks in vehicle data" >> reports/vehicle-data-errors.md
            grep -E "TS2531|TS2532|TS2533" reports/vehicle-data-errors.txt >> reports/vehicle-data-errors.md || echo "No null/undefined errors in vehicle data" >> reports/vehicle-data-errors.md
            
            echo "### Timeline event typing issues" >> reports/vehicle-data-errors.md
            grep -E "timeline|event|vehicle" reports/vehicle-data-errors.txt | grep -E "TS2322|TS2339|TS2345" >> reports/vehicle-data-errors.md || echo "No timeline event typing errors" >> reports/vehicle-data-errors.md
            
            # Add to summary
            echo "## Vehicle Data Issues" >> reports/summary.md
            echo "- $VEHICLE_ERROR_COUNT errors found in vehicle-related code" >> reports/summary.md
            if [ "$VEHICLE_ERROR_COUNT" -gt "10" ]; then
              echo "Recommendation: Focus on implementing proper interfaces for vehicle and timeline data" >> reports/summary.md
            fi
          else
            echo "No errors found in vehicle data handling code." >> reports/vehicle-data-errors.md
          fi

      - name: Upload diagnostic reports
        uses: actions/upload-artifact@v4
        with:
          name: typescript-diagnostic-reports
          path: reports/
          retention-days: 7

      - name: Comment on PR with summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summaryContent = fs.readFileSync('reports/summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summaryContent
            });
