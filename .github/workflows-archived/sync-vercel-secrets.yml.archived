name: Sync Secrets to Vercel

on:
  # Run manually from the Actions tab
  workflow_dispatch:
  
  # Run when secrets are updated in GitHub
  # Note: Only runs when repository secrets are updated through the GitHub UI
  repository_dispatch:
    types: [secrets_updated]
  
  # Run when pushing to main (optional, remove if you prefer manual trigger only)
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sync-vercel-secrets.yml'

jobs:
  sync-secrets:
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Debug Vercel Credentials
        id: check_vercel
        run: |
          echo "Checking Vercel credentials availability..."
          VERCEL_CREDS_OK=true
          
          if [ -z "$VERCEL_ORG_ID" ]; then
            echo "❌ VERCEL_ORG_ID is missing!"
            VERCEL_CREDS_OK=false
          else
            echo "✅ VERCEL_ORG_ID exists"
          fi
          
          if [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "❌ VERCEL_PROJECT_ID is missing!"
            VERCEL_CREDS_OK=false
          else
            echo "✅ VERCEL_PROJECT_ID exists"
          fi
          
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "❌ VERCEL_TOKEN is missing!"
            VERCEL_CREDS_OK=false
          else
            echo "✅ VERCEL_TOKEN exists"
          fi
          
          if [ "$VERCEL_CREDS_OK" = "true" ]; then
            echo "vercel_creds_ok=true" >> $GITHUB_OUTPUT
            echo "✅ All Vercel credentials are available"
          else
            echo "vercel_creds_ok=false" >> $GITHUB_OUTPUT
            echo "❌ Some Vercel credentials are missing!"
          fi
      
      - name: Setup Vercel CLI
        if: steps.check_vercel.outputs.vercel_creds_ok == 'true'
        id: setup_vercel
        run: |
          echo "Setting up Vercel CLI with token..."
          # Create a .vercel/project.json file
          mkdir -p .vercel
          echo "{\"orgId\":\"$VERCEL_ORG_ID\",\"projectId\":\"$VERCEL_PROJECT_ID\"}" > .vercel/project.json
          
          # Debug the created config
          echo "Created Vercel project config:"
          cat .vercel/project.json | sed 's/\"orgId\":\"[^\"]*\"/\"orgId\":\"***\"/g' | sed 's/\"projectId\":\"[^\"]*\"/\"projectId\":\"***\"/g'
          
          if [ -f ".vercel/project.json" ]; then
            echo "vercel_setup=true" >> $GITHUB_OUTPUT
            echo "✅ Vercel project configuration created successfully"
          else
            echo "vercel_setup=false" >> $GITHUB_OUTPUT
            echo "❌ Failed to create Vercel project configuration"
          fi
      
      - name: Pull Existing Environment Variables
        id: pull_env
        if: steps.check_vercel.outputs.vercel_creds_ok == 'true'
        run: |
          echo "Pulling existing environment variables..."
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} || {
            echo "⚠️ Failed to pull environment variables, but continuing with synchronization"
            echo "pull_failed=true" >> $GITHUB_OUTPUT
          }
          
          # Verify .vercel/project.json exists after pull
          if [ -f ".vercel/project.json" ]; then
            echo "pull_succeeded=true" >> $GITHUB_OUTPUT
            echo "✅ Successfully pulled Vercel configuration"
          else
            echo "pull_succeeded=false" >> $GITHUB_OUTPUT
            echo "⚠️ Could not verify successful pull of Vercel configuration"
          fi
      
      - name: Check Supabase Credentials Availability
        id: check_creds
        run: |
          # Check if Supabase credentials are available in GitHub secrets
          ALL_CREDS_AVAILABLE=true
          SOME_CREDS_AVAILABLE=false
          
          echo "Checking Supabase credentials availability..."
          
          if [ -n "${{ secrets.VITE_SUPABASE_URL }}" ]; then
            echo "SUPABASE_URL_EXISTS=true" >> $GITHUB_OUTPUT
            echo "✅ VITE_SUPABASE_URL secret is available"
            SOME_CREDS_AVAILABLE=true
          else
            echo "SUPABASE_URL_EXISTS=false" >> $GITHUB_OUTPUT
            echo "❌ VITE_SUPABASE_URL secret is empty or not available!"
            ALL_CREDS_AVAILABLE=false
          fi
          
          if [ -n "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then
            echo "SUPABASE_ANON_KEY_EXISTS=true" >> $GITHUB_OUTPUT
            echo "✅ VITE_SUPABASE_ANON_KEY secret is available"
            SOME_CREDS_AVAILABLE=true
          else
            echo "SUPABASE_ANON_KEY_EXISTS=false" >> $GITHUB_OUTPUT
            echo "❌ VITE_SUPABASE_ANON_KEY secret is empty or not available!"
            ALL_CREDS_AVAILABLE=false
          fi
          
          if [ -n "${{ secrets.VITE_SUPABASE_SERVICE_KEY }}" ]; then
            echo "SUPABASE_SERVICE_KEY_EXISTS=true" >> $GITHUB_OUTPUT
            echo "✅ VITE_SUPABASE_SERVICE_KEY secret is available"
            SOME_CREDS_AVAILABLE=true
          else
            echo "SUPABASE_SERVICE_KEY_EXISTS=false" >> $GITHUB_OUTPUT
            echo "❌ VITE_SUPABASE_SERVICE_KEY secret is empty or not available!"
            ALL_CREDS_AVAILABLE=false
          fi
          
          # Set overall status outputs
          echo "ALL_CREDS_AVAILABLE=$ALL_CREDS_AVAILABLE" >> $GITHUB_OUTPUT
          echo "SOME_CREDS_AVAILABLE=$SOME_CREDS_AVAILABLE" >> $GITHUB_OUTPUT
          
          if [ "$ALL_CREDS_AVAILABLE" = "true" ]; then
            echo "✅ All required Supabase credentials are available"
          elif [ "$SOME_CREDS_AVAILABLE" = "true" ]; then
            echo "⚠️ Some Supabase credentials are available but not all"
          else
            echo "❌ No Supabase credentials are available!"
          fi
      
      - name: List Current Vercel Environment Variables
        run: |
          echo "Checking current Vercel environment variables..."
          vercel env ls production --token=${{ secrets.VERCEL_TOKEN }} || echo "⚠️ Failed to list environment variables, but continuing"
      
      - name: Sync Supabase Secrets to Vercel
        id: sync_secrets
        run: |
          # Set Vercel environment variables from GitHub secrets
          echo "Synchronizing environment variables to Vercel Production environment..."
          
          # First remove any existing variables to avoid duplicate errors
          echo "Removing existing environment variables if they exist..."
          vercel env rm VITE_SUPABASE_URL production --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "⚠️ Failed to remove VITE_SUPABASE_URL or it doesn't exist"
          vercel env rm VITE_SUPABASE_ANON_KEY production --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "⚠️ Failed to remove VITE_SUPABASE_ANON_KEY or it doesn't exist"
          vercel env rm VITE_SUPABASE_SERVICE_KEY production --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "⚠️ Failed to remove VITE_SUPABASE_SERVICE_KEY or it doesn't exist"
          
          # Track variable success status separately
          URL_SUCCESS=false
          ANON_KEY_SUCCESS=false
          SERVICE_KEY_SUCCESS=false
          
          # Add VITE_SUPABASE_URL if it exists
          if [ "${{ steps.check_creds.outputs.SUPABASE_URL_EXISTS }}" = "true" ]; then
            echo "Adding VITE_SUPABASE_URL to Vercel..."
            echo "${{ secrets.VITE_SUPABASE_URL }}" | vercel env add VITE_SUPABASE_URL production --token=${{ secrets.VERCEL_TOKEN }} && {
              echo "✅ Successfully added VITE_SUPABASE_URL to Vercel"
              URL_SUCCESS=true
            } || {
              echo "❌ Failed to add VITE_SUPABASE_URL to Vercel"
            }
          else
            echo "⚠️ Skipping VITE_SUPABASE_URL (not available in secrets)"
          fi
          
          # Add VITE_SUPABASE_ANON_KEY if it exists
          if [ "${{ steps.check_creds.outputs.SUPABASE_ANON_KEY_EXISTS }}" = "true" ]; then
            echo "Adding VITE_SUPABASE_ANON_KEY to Vercel..."
            echo "${{ secrets.VITE_SUPABASE_ANON_KEY }}" | vercel env add VITE_SUPABASE_ANON_KEY production --token=${{ secrets.VERCEL_TOKEN }} && {
              echo "✅ Successfully added VITE_SUPABASE_ANON_KEY to Vercel"
              ANON_KEY_SUCCESS=true
            } || {
              echo "❌ Failed to add VITE_SUPABASE_ANON_KEY to Vercel"
            }
          else
            echo "⚠️ Skipping VITE_SUPABASE_ANON_KEY (not available in secrets)"
          fi
          
          # Add VITE_SUPABASE_SERVICE_KEY if it exists
          if [ "${{ steps.check_creds.outputs.SUPABASE_SERVICE_KEY_EXISTS }}" = "true" ]; then
            echo "Adding VITE_SUPABASE_SERVICE_KEY to Vercel..."
            echo "${{ secrets.VITE_SUPABASE_SERVICE_KEY }}" | vercel env add VITE_SUPABASE_SERVICE_KEY production --token=${{ secrets.VERCEL_TOKEN }} && {
              echo "✅ Successfully added VITE_SUPABASE_SERVICE_KEY to Vercel"
              SERVICE_KEY_SUCCESS=true
            } || {
              echo "❌ Failed to add VITE_SUPABASE_SERVICE_KEY to Vercel"
            }
          else
            echo "⚠️ Skipping VITE_SUPABASE_SERVICE_KEY (not available in secrets)"
          fi
          
          # Set overall success based on critical variables
          # We consider success if at least URL and ANON_KEY are available (minimum for client operation)
          if [ "$URL_SUCCESS" = "true" ] && [ "$ANON_KEY_SUCCESS" = "true" ]; then
            SYNC_SUCCESS=true
            echo "✅ Critical environment variables synchronized successfully"
          else
            SYNC_SUCCESS=false
            echo "❌ Failed to synchronize critical environment variables"
          fi
          
          # Set output for following steps
          if [ "$SYNC_SUCCESS" = "true" ]; then
            echo "sync_complete=true" >> $GITHUB_OUTPUT
            echo "✅ Successfully synchronized all available environment variables"
          else
            echo "sync_complete=false" >> $GITHUB_OUTPUT
            echo "⚠️ Synchronization completed with warnings or errors"
          fi
      
      - name: Verify Environment Variables
        id: verify_env
        if: steps.sync_secrets.outputs.sync_complete == 'true' || steps.sync_secrets.outputs.sync_complete == 'false'
        run: |
          echo "Verifying environment variables after synchronization..."
          
          # List all environment variables to verify
          vercel env ls production --token=${{ secrets.VERCEL_TOKEN }} > env_list.txt || {
            echo "⚠️ Failed to list environment variables after sync"
            echo "verify_failed=true" >> $GITHUB_OUTPUT
            exit 0
          }
          
          # Check if critical variables exist in the list
          URL_EXISTS=false
          ANON_KEY_EXISTS=false
          SERVICE_KEY_EXISTS=false
          
          if grep -q "VITE_SUPABASE_URL" env_list.txt; then
            URL_EXISTS=true
            echo "✅ VITE_SUPABASE_URL verified in Vercel environment"
          else
            echo "❌ VITE_SUPABASE_URL not found in Vercel environment"
          fi
          
          if grep -q "VITE_SUPABASE_ANON_KEY" env_list.txt; then
            ANON_KEY_EXISTS=true
            echo "✅ VITE_SUPABASE_ANON_KEY verified in Vercel environment"
          else
            echo "❌ VITE_SUPABASE_ANON_KEY not found in Vercel environment"
          fi
          
          if grep -q "VITE_SUPABASE_SERVICE_KEY" env_list.txt; then
            SERVICE_KEY_EXISTS=true
            echo "✅ VITE_SUPABASE_SERVICE_KEY verified in Vercel environment"
          else
            echo "❌ VITE_SUPABASE_SERVICE_KEY not found in Vercel environment"
          fi
          
          # Set verification status
          if [ "$URL_EXISTS" = "true" ] && [ "$ANON_KEY_EXISTS" = "true" ]; then
            echo "verify_success=true" >> $GITHUB_OUTPUT
            echo "✅ Critical environment variables verified successfully"
          else
            echo "verify_success=false" >> $GITHUB_OUTPUT
            echo "❌ Failed to verify critical environment variables"
          fi
          
          # Clean up
          rm -f env_list.txt
      
      - name: Trigger Vercel Deployment
        id: deploy
        if: steps.verify_env.outputs.verify_success == 'true'
        run: |
          echo "Triggering production deployment with updated environment variables..."
          DEPLOY_OUTPUT=$(vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)
          DEPLOY_STATUS=$?
          
          if [ $DEPLOY_STATUS -eq 0 ]; then
            echo "deploy_success=true" >> $GITHUB_OUTPUT
            echo "deploy_url=$DEPLOY_OUTPUT" >> $GITHUB_OUTPUT
            echo "✅ Successfully triggered Vercel deployment"
            echo "Deployment URL: $DEPLOY_OUTPUT"
          else
            echo "deploy_success=false" >> $GITHUB_OUTPUT
            echo "❌ Failed to trigger Vercel deployment"
          fi
      
      - name: Deployment Warning
        if: steps.verify_env.outputs.verify_success != 'true'
        run: |
          echo "❌ Critical environment variables could not be synchronized or verified."
          echo "Deployment not triggered automatically to prevent blank page issues."
          echo "Please check the following:"
          echo "1. Verify GitHub secrets are properly set"
          echo "2. Ensure Vercel credentials are correct"
          echo "3. Manually deploy after fixing the environment variable issues"
      
      - name: Workflow Summary
        if: always()
        run: |
          echo "=== Secrets Synchronization Summary ==="
          echo "Vercel Credentials: $(if [ "${{ steps.check_vercel.outputs.vercel_creds_ok }}" == "true" ]; then echo "✅ Valid"; else echo "❌ Invalid"; fi)"
          echo "Supabase URL: $(if [ "${{ steps.check_creds.outputs.SUPABASE_URL_EXISTS }}" == "true" ]; then echo "✅ Available"; else echo "❌ Missing"; fi)"
          echo "Supabase Anon Key: $(if [ "${{ steps.check_creds.outputs.SUPABASE_ANON_KEY_EXISTS }}" == "true" ]; then echo "✅ Available"; else echo "❌ Missing"; fi)"
          echo "Supabase Service Key: $(if [ "${{ steps.check_creds.outputs.SUPABASE_SERVICE_KEY_EXISTS }}" == "true" ]; then echo "✅ Available"; else echo "❌ Missing"; fi)"
          echo "Sync Status: $(if [ "${{ steps.sync_secrets.outputs.sync_complete }}" == "true" ]; then echo "✅ Complete"; else echo "⚠️ Incomplete"; fi)"
          echo "Verification: $(if [ "${{ steps.verify_env.outputs.verify_success }}" == "true" ]; then echo "✅ Verified"; else echo "❌ Failed"; fi)"
          echo "Deployment: $(if [ "${{ steps.deploy.outputs.deploy_success }}" == "true" ]; then echo "✅ Triggered"; else echo "❌ Not triggered"; fi)"
          if [ "${{ steps.deploy.outputs.deploy_url }}" != "" ]; then
            echo "Deployment URL: ${{ steps.deploy.outputs.deploy_url }}"
          fi
          echo "==================================="
